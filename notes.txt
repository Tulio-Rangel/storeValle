1. Pasos de configuración para el entorno de desarrollo.

- Iniciar el proyecto: npm init -y
- Crar los archivos: .gitignore, .eslintrc.json y .editorconfig
- Buscar en gitignore.io los ignore para node, windows, mac y linux y copiarlos en el .gitignore
- Agregar la configuración en el .editorconfig (uso la misma siempre)
- Agregar la configuracipon del .eslintrc.json (uso la misma siempre)
- Agregar los scripts en el package.json
- Verificar las dependencias globales que tengo instaladas (siempre hago esto porque se me olvidan) npm list -g --depth 0

2. Levantando el servidor.

- Instalar express
- Levantar el servidor (el básico es el hello world que el mismo express pone de ejemplo)

3. Construir la API.
- Crear las rutas de las distintas instancias
- Crear los servicios o controladores de las ruta ej: find, findById, etc.
- Poner en los controladores los status codes.
- Agregar asincronía a los controladores y en las rutas(?).
- Agregar captura de errores con try-catch.
- Crear carpeta de Middlewares y crear los primeros (o todos) los Middlewares.
- Instalar la libreria Boom para trabajar el manejo de errores npm i @hapi/boom
- Encontrar la documentación de las librerías npm docs <nombre de la libreria>
- Hacer validación de datos con Joi.
- Crear una caperta schemas o dtos y crear un archivo por cada entidad, ej: product.schema.js o product.dto.js
- Crear un archivo validatorHandler para crear las validaciones con el shcema que hicimos con Joi en el paso anterior.
- Otros Middlewares usados: cors: npm install cors
                            morgan: npm install morgan
                            helmet: npm install helmet
                            express debug: npm install express-debug --save-dev
                            express slash (sirve para no preocuparnos por poner slash en las rutas): npm install express-slash
                            passport: npm install passport
- Recomendaciones en las APIs: el uso de cors: const cors = require('cors'); app.use(cors()); [Así dejamos la api abierta a cualquier dominio]
                                https:
                                Proceso de Build:
                                Remover logs:
                                Seguridad con Helmet:
                                Testing

4. Deploy (en heroku).
- Crear cueta en heroku.
- Descargar e instalar el CLI de heroku.
- Instalación desde WSL o linux: curl https://cli-assets.heroku.com/install.sh | sh
- Desde la terminal WSL o linux: |heroku login| |heroku create| |git remote -v|
- Renombrar la app: heroku apps:rename <mi-api-rest>
- Seguir la documentación de heroku.
- Agregar el "engines" en el package.json y poner la versión de node en la que estamos trabajando.
- Correr el comando heroku local web para verificar cómo corre en local.
- Crear el archivo Procfile en la ruta principal y escribir web: npm run start (o el comando que tenga en los scripts para correr la app).
- Hacer commit y hacer push a heroku: git push heroku main
- Opcional: revisar cuando hayan errores internos: heroku logs --tail
